import org.springframework.boot.gradle.tasks.bundling.BootJar
import org.springframework.boot.gradle.tasks.bundling.BootWar
import org.springframework.boot.gradle.tasks.run.BootRun

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5/samples
 * This project uses @Incubating APIs which are subject to change.
 */
defaultTasks("publishToMavenLocal")

var appVersion = "2025.1"

val tag: String = System.getenv("RELEASE_TAG") ?: ""
if (!tag.endsWith("RELEASE")) {
    appVersion += "-SNAPSHOT"
}

val commit: String? = System.getenv("COMMIT_HASH")
val appCommit = commit ?: "DEV"

logger.lifecycle("Caritra tool $appVersion:$appCommit")

allprojects {
    group = "com.caritrainc.backend"
    version = appVersion

    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    val kotlinVersion = "1.9.25"
    val springBootVersion = "3.4.2"
    val springBootDependencyManagementVersion = "1.1.7"
    val asciidoctorVersion = "3.3.2"

    kotlin("jvm") version kotlinVersion
    kotlin("plugin.spring") version kotlinVersion
    war
    id("org.springframework.boot") version springBootVersion
    id("io.spring.dependency-management") version springBootDependencyManagementVersion
    id("org.asciidoctor.jvm.convert") version asciidoctorVersion
    kotlin("plugin.jpa") version kotlinVersion
    `maven-publish`
    `java-library`
}


val rootPath: String = project.rootDir.absolutePath
val applicationPath = "$rootPath/application"
val externalLibsPath = "$applicationPath/libs"
val modulesPath = "$applicationPath/modules"

subprojects {
    project.extra["snippetsDir"] = file("build/generated-snippets")

    val applyWarPlugin = project.name.startsWith("apps-development")
    val applyJarPlugin = project.name.startsWith("controllers-")
    logger.lifecycle("Current Project: ${project.name} has war plugin: $applyWarPlugin")

    apply {
        plugin("org.springframework.boot")
        plugin("io.spring.dependency-management")
        plugin("org.jetbrains.kotlin.jvm")
        plugin("org.jetbrains.kotlin.plugin.spring")
        plugin("org.jetbrains.kotlin.plugin.jpa")
        plugin("org.asciidoctor.jvm.convert")
        plugin("org.gradle.maven-publish")
        plugin("org.gradle.java-library")
    }

    when {
        applyWarPlugin -> {
            apply {
                plugin("org.gradle.war")
            }
            tasks.named<BootRun>("bootRun") {
                mainClass.set("com.caritrainc.backend.CaritraApplicationKt")
            }
            tasks.named<BootWar>("bootWar") {
                mainClass.set("com.caritrainc.backend.CaritraApplicationKt")
            }
            tasks.named<Jar>("jar") {
                enabled = false
            }
        }

        applyJarPlugin -> {
            tasks.named<BootJar>("bootJar") {
                mainClass.set("com.caritrainc.backend.CaritraApplicationKt")
            }
        }

        else -> {
            tasks.named<BootJar>("bootJar") {
                enabled = false
            }
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    kotlin {
        jvmToolchain(21)
        compilerOptions {
            freeCompilerArgs.addAll("-Xjsr305=strict")
        }
    }

    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-actuator")
        implementation("org.springframework.boot:spring-boot-starter-data-jpa")
        implementation("org.springframework.boot:spring-boot-starter-mail")
        implementation("org.springframework.boot:spring-boot-starter-pulsar")
        implementation("org.springframework.boot:spring-boot-starter-validation")
        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.boot:spring-boot-starter-aop")
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
        implementation("org.springframework.boot:spring-boot-starter-security")
//        implementation("org.springframework.security:spring-security-core")
//        implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
//        implementation("org.springframework.boot:spring-security-oauth2-jose")

        implementation("com.fasterxml.jackson.core:jackson-databind")
        implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

        implementation("org.jetbrains.kotlin:kotlin-reflect")
        compileOnly("org.projectlombok:lombok")
        developmentOnly("org.springframework.boot:spring-boot-devtools")


        implementation("org.flowable:flowable-spring-boot-starter:7.0.0")
        implementation("org.flowable:flowable-spring-boot-starter-process:7.0.0")

        //Adding dependencies for Spring boot flowable ui

//        implementation ("org.flowable.ui:flowable-ui-app:6.7.2")
//        implementation ("org.flowable:flowable-spring-boot-starter-ui-idm:6.8.1")


//        implementation("org.flowable:flowable-spring-boot-starter-ui-idm:6.8.1")
//        developmentOnly("org.springframework.boot:spring-boot-docker-compose")
        runtimeOnly("io.micrometer:micrometer-registry-prometheus")
        runtimeOnly("org.postgresql:postgresql")
        annotationProcessor("org.projectlombok:lombok")

//        implementation ("org.flowable:flowable-spring-boot-starter-ui-task:6.8.1")




        implementation("org.kie:kie-api:8.44.2.Final")
        implementation("org.drools:drools-core:8.44.2.Final")
        implementation("org.drools:drools-mvel:8.44.2.Final")
        implementation("org.drools:drools-compiler:8.44.2.Final")


//        implementation("org.flowable:flowable-ui-modeler:6.5.0")
//        implementation("org.flowable:flowable-ui-task:6.5.0")
//        implementation("org.flowable:flowable-ui-admin:6.5.0")


        if (applyWarPlugin) {
            providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
        }
    }

    tasks.withType<Test> {
        useJUnitPlatform()
    }

    tasks.test {
        testLogging {
            events("passed", "skipped", "failed")
        }

        useJUnitPlatform()

        outputs.dir(project.extra["snippetsDir"]!!)
    }

    tasks.asciidoctor {
        inputs.dir(project.extra["snippetsDir"]!!)
        dependsOn(tasks.test)
    }

    publishing {
        publications {
            create<MavenPublication>("maven") {
                if (applyWarPlugin) {
                    from(components["web"])
                } else {
                    from(components["java"])
                }

                // artifact names should not include parent directories, so chop off the
                // text before a slash.
                if (project.name.contains("/")) {
                    artifactId = project.name.substring(project.name.lastIndexOf("/") + 1)
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

repositories {
    mavenCentral()
}

extra["snippetsDir"] = file("build/generated-snippets")


kotlin {
    jvmToolchain(21)
    compilerOptions {
        freeCompilerArgs.addAll("-Xjsr305=strict")
    }
}

allOpen {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.MappedSuperclass")
    annotation("jakarta.persistence.Embeddable")
}

tasks.withType<Test> {
    useJUnitPlatform()
}

tasks.test {
    outputs.dir(project.extra["snippetsDir"]!!)
}

tasks.asciidoctor {
    inputs.dir(project.extra["snippetsDir"]!!)
    dependsOn(tasks.test)
}

//tasks.named<BootJar>("bootJar") {
//    enabled = false
//}
//
tasks.named<BootWar>("bootWar") {
    enabled = false
}
